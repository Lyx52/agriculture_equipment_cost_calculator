import{W as p,s as m,ax as s}from"./index-DR-6o-62.js";import{p as n}from"./MeshVertexAttributes-BnsdLhxi.js";import{B as a}from"./vertexSpaceConversion-BCXy7NDE.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-dDnHDEUj.js";import"./computeTranslationToOriginAndRotation-BjRbnFap.js";import"./projectPointToVector-CnCHqBbx.js";import"./meshVertexSpaceUtils-Cn35fD9a.js";import"./MeshLocalVertexSpace-e307vNGK.js";import"./vec3-5f64vXdU.js";import"./BufferView-WHcLjl4E.js";import"./vec42-c_7PZLvB.js";import"./vec4-CZJZSMVN.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
