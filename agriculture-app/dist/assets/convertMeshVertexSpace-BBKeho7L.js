import{W as p,s as m,ax as s}from"./index-D7nePuNx.js";import{p as n}from"./MeshVertexAttributes-DmJm8NTS.js";import{B as a}from"./vertexSpaceConversion-DYCZq879.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-C85mu4Fh.js";import"./computeTranslationToOriginAndRotation-DLszBS9s.js";import"./projectPointToVector-Cs5J3RHQ.js";import"./meshVertexSpaceUtils-Cc8HFS1K.js";import"./MeshLocalVertexSpace-D5EVD6e3.js";import"./vec3-Bzv_OOPZ.js";import"./BufferView-DX1dbuPu.js";import"./vec42-By3YLjCA.js";import"./vec4-CWbdV_O9.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
