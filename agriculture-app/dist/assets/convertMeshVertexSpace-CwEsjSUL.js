import{W as p,s as m,ax as s}from"./index-DIELwNgn.js";import{p as n}from"./MeshVertexAttributes-DQ4csWMd.js";import{B as a}from"./vertexSpaceConversion-D1Ryt0Wy.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-DUtesDoY.js";import"./computeTranslationToOriginAndRotation-CYnB5aiF.js";import"./projectPointToVector-C_AFUZ5_.js";import"./meshVertexSpaceUtils-7VZYfdOz.js";import"./MeshLocalVertexSpace-HE-JDroi.js";import"./vec3-C5a_ctmF.js";import"./BufferView-DM8wyAll.js";import"./vec42-CwvTV44c.js";import"./vec4-C9fgXc1r.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
