import{v as r,hN as D,hO as k,hP as E,B as J,O as G,he as Y,fO as V,$ as X,hf as Z,fH as tt,fM as et,fI as st,fJ as ot,hg as it,fK as rt,aY as nt,hQ as at,hR as B}from"./index-Ca6X6SJU.js";import{r as pt}from"./vec3f32-nZdmKIgz.js";import{n as ht}from"./WGLContainer-CLuRgSOR.js";import{t as dt,a as L,i as lt}from"./FeatureCommandQueue-t1nxl-fk.js";import{h as q,g as a,m as H,I as ct,C as g,P as N,a as ut,j as P,S as ft,b as vt,c as mt,G as xt,H as yt,l as gt,v as wt,w as _t,e as Mt}from"./UpdateTracking2D-Cpkaiucx.js";class I extends ct{}r([q(0,g)],I.prototype,"pos",void 0),r([q(1,g)],I.prototype,"uv",void 0);class $t extends wt{}class U extends N{}r([a(ut)],U.prototype,"dvs",void 0);class m extends N{}r([a(g)],m.prototype,"perspective",void 0),r([a(g)],m.prototype,"texSize",void 0),r([a(P)],m.prototype,"wrapAroundShift",void 0),r([a(P)],m.prototype,"opacity",void 0),r([a(ft)],m.prototype,"texture",void 0);class y extends vt{vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(mt(t,this.config.perspective)),o=new xt(e.pos.add(new g(this.config.wrapAroundShift,0)),1),i=this.transform.dvs.multiply(o);return{uv:t,glPosition:new yt(i.xy.multiply(s),0,s)}}fragment(e){const t=gt(this.config.texture,e.uv).multiply(this.config.opacity),s=new _t;return s.glFragColor=t,s}}r([a(U)],y.prototype,"transform",void 0),r([a(m)],y.prototype,"config",void 0),r([D(0,H(I))],y.prototype,"vertex",null),r([D(0,H($t))],y.prototype,"fragment",null);let St=class extends dt{constructor(){super(...arguments),this.type=Mt.Overlay,this._mesh=null,this.shaders={overlay:new y}}render(e,t){const{context:s,painter:o}=e,i=this._getMesh(e,t);o.setPipelineState(L);const{isWrapAround:p,wrapAroundShift:c}=t.config,u={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:u},defines:null,optionalAttributes:null,useComputeBuffer:!1};o.setPipelineState({...L,stencil:{write:!1,test:{compare:k.EQUAL,op:{fail:E.KEEP,zFail:E.KEEP,zPass:E.REPLACE},ref:0,mask:255}}}),o.submitDrawMeshUntyped(s,f,i),p&&(u.wrapAroundShift=c,o.submitDrawMeshUntyped(s,f,i))}shutdown(){J(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const o=this._mesh.vertexBuffers.get("positions");if(!o)throw new Error("Buffer not found");o.setData(t.position)}else{const o=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:t.position,uvs:t.tex},index:t.index!=null?{index:t.index}:void 0,groups:[{attributes:[{name:"pos",count:2,type:G.FLOAT,location:0,vertex:"positions",stride:8,offset:0},{name:"tex",count:2,type:G.UNSIGNED_SHORT,location:1,vertex:"uvs",stride:4,offset:0}],index:t.index!=null?"index":void 0,primitive:Y.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:o}]})}return this._mesh}};class It extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=V(),this._overlayTechnique=new St}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==X.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:o,pixelRatio:i,resolution:p,rotation:c,viewpoint:u,displayMat3:f}=t;if(this._viewStateId===s)return;const w=B(c),h=i*o[0],v=i*o[1];this._localOrigin=u.targetGeometry.clone();const{x,y:$}=this._localOrigin,_=Z(x,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=$;const S=p*h,O=p*v,n=tt(this._dvsMat3);et(n,n,f),st(n,n,ot(h/2,v/2)),it(n,n,pt(h/S,-v/O,1)),rt(n,n,-w),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:o,spatialReference:i,worldScreenWidth:p,size:c,viewpoint:u}=s,f=this._localOrigin;let w,h=0;const v=nt(i);if(v&&i.isWrappable){const x=c[0],$=c[1],_=B(o),S=Math.abs(Math.cos(_)),O=Math.abs(Math.sin(_)),n=Math.round(x*S+$*O),[T,j]=v.valid,d=at(i),{x:z,y:W}=u.targetGeometry,F=[z,W],R=[0,0];s.toScreen(R,F);const M=[0,0];let b;b=n>p?.5*p:.5*n;const C=Math.floor((z+.5*d)/d),K=T+C*d,Q=j+C*d,A=[R[0]+b,0];s.toMap(M,A),M[0]>Q&&(h=d),A[0]=R[0]-b,s.toMap(M,A),M[0]<K&&(h=-d),w={worldWidth:d,xBounds:[T,j]}}for(const x of t)x.updateDrawCoords(f,h,i,w)}}export{It as u};
