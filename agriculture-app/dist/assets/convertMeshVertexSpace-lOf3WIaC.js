import{W as p,s as m,ax as s}from"./index-CIBtwlmQ.js";import{p as n}from"./MeshVertexAttributes-CwoeaVrs.js";import{B as a}from"./vertexSpaceConversion-CgJNCyPe.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-0OdWgpyC.js";import"./computeTranslationToOriginAndRotation-Cssn4ahd.js";import"./projectPointToVector-BtaHuBPy.js";import"./meshVertexSpaceUtils-gNH__i76.js";import"./MeshLocalVertexSpace-CH1f2AlT.js";import"./vec3-JJQoiqRZ.js";import"./BufferView-AtKBgVPd.js";import"./vec42-QLi3wb65.js";import"./vec4-CFR1749c.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
