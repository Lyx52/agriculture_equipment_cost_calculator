import{I as c,dP as f,f6 as y,U as S,b9 as l,eq as o,cZ as m,m as R,hd as g,eT as p,z as d}from"./index-DhSvwCRD.js";function q(n){const t=n.geometry,a=n.toJSON(),e=a;let i,r,s;return t!=null&&(r=t.spatialReference,s=o(r),e.geometryType=m(t),e.geometry=JSON.stringify(t),e.inSR=s),a.outSR?(e.outSR=o(a.outSR),i=n.outSpatialReference):t&&(e.outSR=e.inSR,i=r),e.bin&&(e.bin=JSON.stringify(e.bin)),e.quantizationParameters&&(e.quantizationParameters=JSON.stringify(e.quantizationParameters)),e.outStatistics&&(e.outStatistics=JSON.stringify(e.outStatistics)),e.outTimeReference&&(e.outTimeReference=JSON.stringify(e.outTimeReference)),n.defaultSpatialReference&&R(r,i)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function J(n,t,a){return N(n,t,a)}async function N(n,t,a={}){const e=typeof n=="string"?c(n):n,i=t.geometry?[t.geometry]:[],r=await f(i,null,{signal:a.signal}),s=r==null?void 0:r[0];s!=null&&((t=t.clone()).geometry=s);const u=y({...e.query,f:"json",...q(t)});return S(l(e.path,"queryBins"),{...a,query:{...u,...a.query}})}async function T(n,t,a){const{data:e}=await J(p(n),g.from(t),a);return d.fromJSON(e)}export{T as executeBinsQuery};
