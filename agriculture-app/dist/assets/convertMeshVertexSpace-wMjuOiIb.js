import{E as p,s as m,am as s}from"./index-C_0TPXd0.js";import{p as n}from"./MeshVertexAttributes-B0gwcq7F.js";import{B as a}from"./vertexSpaceConversion-CeWSm3gY.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-8oxXnYTK.js";import"./computeTranslationToOriginAndRotation-BxJkWKNi.js";import"./projectPointToVector-DTudEYRC.js";import"./meshVertexSpaceUtils-DwfRFrAU.js";import"./MeshLocalVertexSpace-CJdOE0Fs.js";import"./vec3-tJ0hRJe8.js";import"./BufferView-DdyNaYNC.js";import"./vec42-C2fTO1wE.js";import"./vec4-CSPY3x-2.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
