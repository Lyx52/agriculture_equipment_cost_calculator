import{E as p,s as m,am as s}from"./index-XIO9fwxi.js";import{p as n}from"./MeshVertexAttributes-CAe8flKo.js";import{B as a}from"./vertexSpaceConversion-Bsh3Ir8v.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-C0EYvVIW.js";import"./computeTranslationToOriginAndRotation-CSS5MKi2.js";import"./projectPointToVector-CKfRa7Hu.js";import"./meshVertexSpaceUtils-CpFyn2yK.js";import"./MeshLocalVertexSpace-CJnIziha.js";import"./vec3-BSpZT9Nd.js";import"./BufferView--hKqkYTo.js";import"./vec42-CC9xzoLY.js";import"./vec4-CjF0-M3R.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
