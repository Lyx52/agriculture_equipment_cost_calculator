import{W as p,s as m,ax as s}from"./index-BgXBj-Oy.js";import{p as n}from"./MeshVertexAttributes-BGbQlC0u.js";import{B as a}from"./vertexSpaceConversion-heuVc20f.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-jlgoq1vu.js";import"./computeTranslationToOriginAndRotation-Dzcb3bZr.js";import"./projectPointToVector-DE0DdSGH.js";import"./meshVertexSpaceUtils-BXLv-Rxl.js";import"./MeshLocalVertexSpace-z_3GHAnt.js";import"./vec3-Dv7TvR11.js";import"./BufferView-C394Dxar.js";import"./vec42-3yZmKf0C.js";import"./vec4-CUNHYyAl.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
