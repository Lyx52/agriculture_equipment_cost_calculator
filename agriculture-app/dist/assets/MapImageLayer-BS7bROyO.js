import{dT as $,en as T,dX as O,dV as P,dW as E,dY as L,dU as F,H as M,ed as v,el as g,eo as x,ep as R,eq as U,er as _,U as f,bd as j,es as q,et as J,s as S,o as N,v as i,w as o,eu as I,b5 as A,bA as V,d$ as k,x as z,ev as H,e2 as W}from"./index-Ca6X6SJU.js";import{i as Z}from"./APIKeyMixin-BDtIm6-M.js";import{m as B,f as C,t as D}from"./SublayersOwner-pMhbKXIo.js";import{l as G}from"./ArcGISService-Cr8_k8IR.js";import{e as K}from"./CustomParametersMixin-BSioTDnO.js";import{y as X}from"./ExportImageParameters-CgKdERuD.js";import{t as Y}from"./versionUtils-CgsYagfM.js";import"./UniqueValueRenderer-B1EzWJsu.js";import"./ColorStop-1aZx_1qT.js";import"./diffUtils-CmlwBwS8.js";import"./colorRamps-Bnd8eTQ9.js";import"./sizeVariableUtils-Cmcuvw-4.js";import"./visualVariableUtils-CBBE-8ST.js";import"./jsonUtils-CKaM3ITf.js";import"./defaults-I7Ufnjj8.js";import"./defaultsJSON-GKolV7NZ.js";import"./styleUtils-DykxOObF.js";import"./jsonUtils-DExw3LlA.js";import"./LRUCache-DXzQ8aMl.js";import"./FieldsIndex-DjEQZHCo.js";import"./UnknownTimeZone-Hc7M8aTF.js";import"./OverrideHelper-Dbzn6IIA.js";import"./colorUtils-gZi5hGTL.js";import"./vec42-2JCQ4qjo.js";import"./vec4f64-CMoMXWBi.js";import"./utils-DhDgF2gQ.js";import"./enums-CmIX1y88.js";import"./quantizationUtils-CKOI_lP5.js";import"./heatmapUtils-BiCFNUnY.js";import"./QueryTask-Bv0k1Sc6.js";import"./infoFor3D-CxdEiWhp.js";import"./executeForIds-DcEOqDca.js";import"./featureConversionUtils-Bq0n-SSN.js";import"./featureLayerUtils-IU43f4F0.js";import"./FeatureType-BtU7rxdm.js";import"./FeatureTemplate-mtqlBIJw.js";import"./labelingInfo-C6wRAOTO.js";import"./labelUtils-w2wElY7E.js";import"./LayerFloorInfo-DanwqaJH.js";import"./Relationship-DNt1vC0u.js";import"./serviceCapabilitiesUtils-BjyvCOeZ.js";import"./popupUtils-Dqle4VbI.js";let s=class extends $(T(O(B(C(G(P(E(L(F(Z(K(W)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new X({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(M).then(()=>this._fetchService(r))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,r){const l=r.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,r,l,t){var m,c,b;if(!this.loaded||!e)return;const a=e.slice().reverse().flatten(({sublayers:n})=>n&&n.toArray().reverse()).toArray();let p=!1;const d=v(t.origin);if((m=this.capabilities)!=null&&m.operations.supportsExportMap&&((b=(c=this.capabilities)==null?void 0:c.exportMap)!=null&&b.supportsDynamicLayers)){if(d===g.PORTAL_ITEM){const n=this.createSublayersForOrigin("service").sublayers;p=x(a,n,g.SERVICE)}else if(d>g.PORTAL_ITEM){const n=this.createSublayersForOrigin("portal-item");p=x(a,n.sublayers,v(n.origin))}}const y=[],u={writeSublayerStructure:p,...t};let h=p||this.hasVisibleLayersForOrigin(d);a.forEach(n=>{const w=n.write({},u);y.push(w),h=h||n.originOf("visible")==="user"}),y.some(n=>Object.keys(n).length>1)&&(r.layers=y),h&&(r.visibleLayers=a.filter(n=>n.visible).map(n=>n.id))}createExportImageParameters(e,r,l,t){const a=(t==null?void 0:t.pixelRatio)||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=(t==null?void 0:t.floors)??null,this._exportImageParameters.scale=R({extent:e,width:r})*a;const p=this._exportImageParameters.toJSON(),d=!(t!=null&&t.rotation)||this.version<10.3?{}:{rotation:-t.rotation},y=e==null?void 0:e.spatialReference,u=U(y);p.dpi*=a;const h={};if(t!=null&&t.timeExtent){const{start:m,end:c}=t.timeExtent.toJSON();h.time=m&&c&&m===c?""+m:`${m??"null"},${c??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:u,imageSR:u,size:r+","+l,...p,...d,...h}}async fetchImage(e,r,l,t){const{data:a}=await this._fetchImage("image",e,r,l,t);return a}async fetchImageBitmap(e,r,l,t){const{data:a,url:p}=await this._fetchImage("blob",e,r,l,t);return _(a,p,t==null?void 0:t.signal)}async fetchRecomputedExtents(e={}){const r={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await f(this.url,r),{extent:t,fullExtent:a,timeExtent:p}=l,d=t||a;return{fullExtent:d&&j.fromJSON(d),timeExtent:p&&q.fromJSON({start:p[0],end:p[1]})}}loadAll(){return J(this,e=>{e(this.allSublayers),e(this.subtables)})}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,r,l,t,a){var y,u,h;const p={responseType:e,signal:(a==null?void 0:a.signal)??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(r,l,t,a),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},d=this.parsedUrl.path+"/export";if(((y=p.query)==null?void 0:y.dynamicLayers)!=null&&!((h=(u=this.capabilities)==null?void 0:u.exportMap)!=null&&h.supportsDynamicLayers))throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:p.query});try{const{data:m}=await f(d,p);return{data:m,url:d}}catch(m){throw N(m)?m:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${d}`,{error:m})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:r,ssl:l}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=r,this.read(r,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){var r;return!(e==null||!((r=this.sublayersSourceJSON[e])!=null&&r.visibleLayers))}};i([o(I("dateFieldsTimeReference"))],s.prototype,"dateFieldsTimeZone",void 0),i([o({type:Boolean})],s.prototype,"datesInUnknownTimezone",void 0),i([o()],s.prototype,"dpi",void 0),i([o()],s.prototype,"gdbVersion",void 0),i([o()],s.prototype,"imageFormat",void 0),i([A("imageFormat",["supportedImageFormatTypes"])],s.prototype,"readImageFormat",null),i([o({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],s.prototype,"imageMaxHeight",void 0),i([o({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],s.prototype,"imageMaxWidth",void 0),i([o()],s.prototype,"imageTransparency",void 0),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),i([o({json:{read:!1,write:!1}})],s.prototype,"labelsVisible",void 0),i([o({type:["ArcGISMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),i([o({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),i([o(I("preferredTimeReference"))],s.prototype,"preferredTimeZone",void 0),i([o()],s.prototype,"sourceJSON",void 0),i([o({json:{write:{ignoreOrigin:!0}}})],s.prototype,"sublayers",void 0),i([V("sublayers",{layers:{type:[D]},visibleLayers:{type:[H]}})],s.prototype,"writeSublayers",null),i([o({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),i([o({json:{read:!1},readOnly:!0,value:"map-image"})],s.prototype,"type",void 0),i([o(k)],s.prototype,"url",void 0),s=i([z("esri.layers.MapImageLayer")],s);const ke=s;export{ke as default};
