import{W as p,s as m,ax as s}from"./index-BPI4YOF4.js";import{p as n}from"./MeshVertexAttributes-BkJzmtnf.js";import{B as a}from"./vertexSpaceConversion-Pjo6MslI.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-ByuuKK3l.js";import"./computeTranslationToOriginAndRotation-B4SOTkrU.js";import"./projectPointToVector-D8AjEZpb.js";import"./meshVertexSpaceUtils-DVOWh4iA.js";import"./MeshLocalVertexSpace-DlRGvt2Y.js";import"./vec3-gh4ohP_d.js";import"./BufferView-CBqi4Wgr.js";import"./vec42-rfqKqpXN.js";import"./vec4-Bqn15BM0.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
