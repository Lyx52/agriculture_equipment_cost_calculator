import{W as p,s as m,ax as s}from"./index-gyzTXXWY.js";import{p as n}from"./MeshVertexAttributes-BJ-nkZ1l.js";import{B as a}from"./vertexSpaceConversion-BqmPnRMC.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-C7LJvFmX.js";import"./computeTranslationToOriginAndRotation-DCUiJA06.js";import"./projectPointToVector-DF1DvEth.js";import"./meshVertexSpaceUtils-DBWdEYdz.js";import"./MeshLocalVertexSpace-jFOugZH1.js";import"./vec3-RouI-ISP.js";import"./BufferView-D4blTgMN.js";import"./vec42-DgudBsAw.js";import"./vec4-B0t47rqF.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
