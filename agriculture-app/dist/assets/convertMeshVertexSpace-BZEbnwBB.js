import{W as p,s as m,ax as s}from"./index-CbmY42Ye.js";import{p as n}from"./MeshVertexAttributes-Bs_dzTQk.js";import{B as a}from"./vertexSpaceConversion-Byk-KD27.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-DX4sO6Xk.js";import"./computeTranslationToOriginAndRotation-BB_R18pk.js";import"./projectPointToVector-DW24pHH-.js";import"./meshVertexSpaceUtils-DVeqvUhK.js";import"./MeshLocalVertexSpace-DIL_67IJ.js";import"./vec3-N4ZkxQ6G.js";import"./BufferView-BapVBpeY.js";import"./vec42-BgT5n3C0.js";import"./vec4-CxJ4umyw.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
