import{E as p,s as m,am as s}from"./index-DhSvwCRD.js";import{p as n}from"./MeshVertexAttributes-DYy3p8Re.js";import{B as a}from"./vertexSpaceConversion-Cy1PpQ3O.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BrAGwy2n.js";import"./computeTranslationToOriginAndRotation-BVIecK2U.js";import"./projectPointToVector-BjwEE9xG.js";import"./meshVertexSpaceUtils-CrlkH7TV.js";import"./MeshLocalVertexSpace-CI-GegPp.js";import"./vec3-D2YAx0wS.js";import"./BufferView-C6IJLkIg.js";import"./vec42-CSDwydJJ.js";import"./vec4-D4AJ_MUg.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
