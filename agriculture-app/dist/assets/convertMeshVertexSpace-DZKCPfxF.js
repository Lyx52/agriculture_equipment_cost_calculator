import{W as p,s as m,ax as s}from"./index-DZ7cCpRK.js";import{p as n}from"./MeshVertexAttributes-BHdBvDbj.js";import{B as a}from"./vertexSpaceConversion-B1QDjWNb.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-YlfH--U_.js";import"./computeTranslationToOriginAndRotation-BIyMYgWu.js";import"./projectPointToVector-CJxfd422.js";import"./meshVertexSpaceUtils-CNEMshX2.js";import"./MeshLocalVertexSpace-BvS0_JGb.js";import"./vec3-BwIaLWUU.js";import"./BufferView-Bn9Vo51O.js";import"./vec42-CBhtCAs_.js";import"./vec4-jlptp_II.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
