import{E as p,s as m,am as s}from"./index-I9roUNmP.js";import{p as n}from"./MeshVertexAttributes-jQRajfxN.js";import{B as a}from"./vertexSpaceConversion-DnFmlWgU.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-CJWggxzP.js";import"./computeTranslationToOriginAndRotation-DhDSBFyK.js";import"./projectPointToVector-BYhiIDbw.js";import"./meshVertexSpaceUtils-Wg-rOLx-.js";import"./MeshLocalVertexSpace-C0zOC6Df.js";import"./vec3-mpNxUrxw.js";import"./BufferView-B63sqkMs.js";import"./vec42-CHXqGT8m.js";import"./vec4-Dj03m6BY.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
