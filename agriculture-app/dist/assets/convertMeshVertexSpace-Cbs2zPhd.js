import{E as p,s as m,am as s}from"./index-Ca6X6SJU.js";import{p as n}from"./MeshVertexAttributes-Degq4LtH.js";import{B as a}from"./vertexSpaceConversion-CfynZF4O.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BlrUDVXH.js";import"./computeTranslationToOriginAndRotation-PTHx8xeh.js";import"./projectPointToVector-BAQwIYRt.js";import"./meshVertexSpaceUtils-DGftH_ex.js";import"./MeshLocalVertexSpace-C_sqrS-3.js";import"./vec3-b9Zqw12s.js";import"./BufferView-CIyDgtqx.js";import"./vec42-2JCQ4qjo.js";import"./vec4-BOX82gMf.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
