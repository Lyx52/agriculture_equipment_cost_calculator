import{W as p,s as m,ax as s}from"./index-B1r_tx_U.js";import{p as n}from"./MeshVertexAttributes-Dbm4oL-X.js";import{B as a}from"./vertexSpaceConversion-nZi547Ce.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-CSKppSlJ.js";import"./spatialReferenceEllipsoidUtils-BOUIqtu6.js";import"./computeTranslationToOriginAndRotation-Bwjh6Y7t.js";import"./projectPointToVector-B-l41B_0.js";import"./meshVertexSpaceUtils-6njSi3-i.js";import"./MeshLocalVertexSpace-nttF2VNN.js";import"./vec3-pnPNdcPJ.js";import"./BufferView-BhaTBeTi.js";import"./vec42-DwDz26pO.js";import"./vec4-K9e1Ty9E.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=a(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
