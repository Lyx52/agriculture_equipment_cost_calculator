import{c as w,e as y,p as I,f as V,i as H,k as v,m as T,o,u as g,n as q,v as n,w as f,x as U}from"./index-Dq00kJcf.js";import"./colorUtils-B2miMDaN.js";import"./utils-_U6Nvs0J.js";import"./enums-CmIX1y88.js";import"./floatRGBA-Dg5nmR35.js";import"./UpdateTracking2D-HUQsREbk.js";import"./GeometryUtils-BNx60U-f.js";import"./defaults-D8rrudJp.js";import"./OverrideHelper-D1FSZK9g.js";import"./Container-Bxi-gfjP.js";import"./WGLContainer-CwxNGV-l.js";import"./Program-DaKcruV0.js";import"./LabelMetric-DrFJF4DD.js";import"./StyleDefinition-BTt_i6C1.js";import"./enums-BRzLM11V.js";import"./GridShader-B-NFs399.js";import"./FeatureCommandQueue-dFv6FgLH.js";import"./PieChartMeshWriter-DpJg9Gsf.js";import"./renderState-CYVrrnEO.js";import"./interfaces-CJw7Cnm-.js";import"./testSVGPremultipliedAlpha-DHSJvRc-.js";import{F as C}from"./GraphicsView2D-DNY0jK_B.js";import"./earcut-Lltz9D9k.js";import"./vec3f32-nZdmKIgz.js";import{r as b,o as m,n as d}from"./imageUtils-BUR9QKDU.js";import{j as Q,y as S}from"./LayerView-dIqQvL5t.js";import{h as $}from"./HighlightGraphicContainer-C4uLSsgr.js";import{i as F}from"./RefreshableLayerView-DXPLw5OY.js";import{_ as P,R as k}from"./MapServiceLayerViewHelper-CtsojTQK.js";import{r as L}from"./drapedUtils-CRFRGeWd.js";import"./vec42-DcRDHaZs.js";import"./vec4f64-CMoMXWBi.js";import"./BidiEngine-DNnuvc1i.js";import"./Rect-CUzevAry.js";import"./BindType-BmZEZMMh.js";import"./Util-DtI7Tnmn.js";import"./defaultsJSON-GKolV7NZ.js";import"./quantizationUtils-bNDoTetC.js";import"./BufferObject-DV5gp3E2.js";import"./VertexArrayObject-CQpvQm1g.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ProgramTemplate-D4MBUxaf.js";import"./config-MDUrh2eL.js";import"./featureConversionUtils-C7HrPzZc.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-BhkBx0QP.js";import"./TimeOnly-DMOZp7Ul.js";import"./UnknownTimeZone-BtHHyKcl.js";import"./timeSupport-B2Y5lxgc.js";import"./labelUtils-BqBdfPXQ.js";import"./FieldsIndex-sU6gSNmm.js";import"./diffUtils-D_A-TeR4.js";import"./constants-F8oTIn7N.js";import"./TurboLine-CZnkDbPI.js";import"./basicInterfaces-CZwQPxTp.js";import"./normalizeUtilsSync-B4TKOGhQ.js";import"./Bitmap-D4trJsDU.js";import"./TileContainer-CiQfvUOD.js";import"./layerViewUtils-f-nBoSBK.js";import"./AGraphicContainer-Bn4Sv9Rb.js";import"./TechniqueInstance-BMjOCf9u.js";import"./languageUtils-CLufmn-x.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-CB4wValD.js";import"./number-CS1o1e-u.js";import"./popupUtils-HI8n_dpp.js";const E=[0,0];let a=class extends F(b(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){var e;this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),(e=this._highlightView)==null||e.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e==null?void 0:e.effectiveMinLOD,e==null?void 0:e.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,r)=>this.fetchTile(i,r),scheduler:this.scheduler,priority:V.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new H({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),P(this,this.layer)){const i=this._highlightView=new C({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new $(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(r,h)=>L(r,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,h)=>{i.graphicUpdateHandler({graphic:r,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var t,e;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(t=this._popupHighlightHelper)==null||t.destroy(),(e=this._highlightView)==null||e.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){var e;return T((e=this.layer.tileInfo)==null?void 0:e.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(E,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:r,resamplingLevel:h=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(s){if(!o(s)&&!this.resampling)return m(this._tileInfoView.tileInfo.size);if(h<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const c=new g(u),_=await this.fetchTile(c,{...e,resamplingLevel:h+1});return d(this._tileInfoView,_,c,t)}}throw s}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:r}),!this.resampling&&l.level!==t.level)return m(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(s){if(o(s))throw s;return m(this._tileInfoView.tileInfo.size)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||q.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([f()],a.prototype,"resampling",null),n([f()],a.prototype,"tilemapCache",null),a=n([U("esri.views.2d.layers.TileLayerView2D")],a);const Kt=a;export{Kt as default};
